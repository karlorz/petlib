# This file was generated by liblab | https://liblab.com/

from typing import Any
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import Order


class StoreService(BaseService):

    @cast_models
    def get_inventory(self) -> dict:
        """Returns a map of status codes to quantities

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: dict
        """

        serialized_request = (
            Serializer(f"{self.base_url}/store/inventory", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def place_order(self, request_body: Order = None) -> Order:
        """Place a new order in the store

        :param request_body: The request body., defaults to None
        :type request_body: Order, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: Order
        """

        Validator(Order).is_optional().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/store/order", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Order._unmap(response)

    @cast_models
    def get_order_by_id(self, order_id: int) -> str:
        """For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.

        :param order_id: ID of order that needs to be fetched
        :type order_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: str
        """

        Validator(int).validate(order_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/store/order/{{orderId}}", self.get_default_headers()
            )
            .add_path("orderId", order_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return Order._unmap(response)

    @cast_models
    def delete_order(self, order_id: int) -> Any:
        """For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors

        :param order_id: ID of the order that needs to be deleted
        :type order_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).validate(order_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/store/order/{{orderId}}", self.get_default_headers()
            )
            .add_path("orderId", order_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)
        return response
