# This file was generated by liblab | https://liblab.com/

from typing import Any, List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import ApiResponse, FindPetsByStatusStatus, Pet


class PetService(BaseService):

    @cast_models
    def add_pet(self, request_body: Pet) -> str:
        """Add a new pet to the store

        :param request_body: The request body.
        :type request_body: Pet
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful operation
        :rtype: str
        """

        Validator(Pet).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/pet", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Pet._unmap(response)

    @cast_models
    def update_pet(self, request_body: Pet) -> str:
        """Update an existing pet by Id

        :param request_body: The request body.
        :type request_body: Pet
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful operation
        :rtype: str
        """

        Validator(Pet).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/pet", self.get_default_headers())
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Pet._unmap(response)

    @cast_models
    def find_pets_by_status(self, status: FindPetsByStatusStatus = None) -> str:
        """Multiple status values can be provided with comma separated strings

        :param status: Status values that need to be considered for filter, defaults to None
        :type status: FindPetsByStatusStatus, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: str
        """

        Validator(FindPetsByStatusStatus).is_optional().validate(status)

        serialized_request = (
            Serializer(f"{self.base_url}/pet/findByStatus", self.get_default_headers())
            .add_query("status", status)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return [Pet._unmap(item) for item in response]

    @cast_models
    def find_pets_by_tags(self, tags: List[str] = None) -> str:
        """Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.

        :param tags: Tags to filter by, defaults to None
        :type tags: List[str], optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: str
        """

        Validator(str).is_array().is_optional().validate(tags)

        serialized_request = (
            Serializer(f"{self.base_url}/pet/findByTags", self.get_default_headers())
            .add_query("tags", tags)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return [Pet._unmap(item) for item in response]

    @cast_models
    def get_pet_by_id(self, pet_id: int) -> str:
        """Returns a single pet

        :param pet_id: ID of pet to return
        :type pet_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: str
        """

        Validator(int).validate(pet_id)

        serialized_request = (
            Serializer(f"{self.base_url}/pet/{{petId}}", self.get_default_headers())
            .add_path("petId", pet_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return Pet._unmap(response)

    @cast_models
    def update_pet_with_form(
        self, pet_id: int, name: str = None, status: str = None
    ) -> Any:
        """update_pet_with_form

        :param pet_id: ID of pet that needs to be updated
        :type pet_id: int
        :param name: Name of pet that needs to be updated, defaults to None
        :type name: str, optional
        :param status: Status of pet that needs to be updated, defaults to None
        :type status: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).validate(pet_id)
        Validator(str).is_optional().validate(name)
        Validator(str).is_optional().validate(status)

        serialized_request = (
            Serializer(f"{self.base_url}/pet/{{petId}}", self.get_default_headers())
            .add_path("petId", pet_id)
            .add_query("name", name)
            .add_query("status", status)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def delete_pet(self, pet_id: int, api_key: str = None) -> Any:
        """delete_pet

        :param pet_id: Pet id to delete
        :type pet_id: int
        :param api_key: api_key, defaults to None
        :type api_key: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).validate(pet_id)
        Validator(str).is_optional().validate(api_key)

        serialized_request = (
            Serializer(f"{self.base_url}/pet/{{petId}}", self.get_default_headers())
            .add_header("api_key", api_key)
            .add_path("petId", pet_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def upload_file(
        self, pet_id: int, request_body: bytes = None, additional_metadata: str = None
    ) -> ApiResponse:
        """upload_file

        :param request_body: The request body., defaults to None
        :type request_body: bytes, optional
        :param pet_id: ID of pet to update
        :type pet_id: int
        :param additional_metadata: Additional Metadata, defaults to None
        :type additional_metadata: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: ApiResponse
        """

        Validator(bytes).is_optional().validate(request_body)
        Validator(int).validate(pet_id)
        Validator(str).is_optional().validate(additional_metadata)

        serialized_request = (
            Serializer(
                f"{self.base_url}/pet/{{petId}}/uploadImage", self.get_default_headers()
            )
            .add_path("petId", pet_id)
            .add_query("additionalMetadata", additional_metadata)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "application/octet-stream")
        )

        response = self.send_request(serialized_request)
        return ApiResponse._unmap(response)
