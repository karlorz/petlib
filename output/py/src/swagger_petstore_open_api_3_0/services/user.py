# This file was generated by liblab | https://liblab.com/

from typing import Any, List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import User


class UserService(BaseService):

    @cast_models
    def create_user(self, request_body: User = None) -> Any:
        """This can only be done by the logged in user.

        :param request_body: The request body., defaults to None
        :type request_body: User, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(User).is_optional().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/user", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def create_users_with_list_input(self, request_body: List[User] = None) -> str:
        """Creates list of users with given input array

        :param request_body: The request body., defaults to None
        :type request_body: List[User], optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful operation
        :rtype: str
        """

        Validator(User).is_array().is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/user/createWithList", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return User._unmap(response)

    @cast_models
    def login_user(self, username: str = None, password: str = None) -> str:
        """login_user

        :param username: The user name for login, defaults to None
        :type username: str, optional
        :param password: The password for login in clear text, defaults to None
        :type password: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: str
        """

        Validator(str).is_optional().validate(username)
        Validator(str).is_optional().validate(password)

        serialized_request = (
            Serializer(f"{self.base_url}/user/login", self.get_default_headers())
            .add_query("username", username)
            .add_query("password", password)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def logout_user(self) -> Any:
        """logout_user

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(f"{self.base_url}/user/logout", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def get_user_by_name(self, username: str) -> str:
        """get_user_by_name

        :param username: The name that needs to be fetched. Use user1 for testing.
        :type username: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: str
        """

        Validator(str).validate(username)

        serialized_request = (
            Serializer(f"{self.base_url}/user/{{username}}", self.get_default_headers())
            .add_path("username", username)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return User._unmap(response)

    @cast_models
    def update_user(self, username: str, request_body: User = None) -> Any:
        """This can only be done by the logged in user.

        :param request_body: The request body., defaults to None
        :type request_body: User, optional
        :param username: name that needs to be updated
        :type username: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(User).is_optional().validate(request_body)
        Validator(str).validate(username)

        serialized_request = (
            Serializer(f"{self.base_url}/user/{{username}}", self.get_default_headers())
            .add_path("username", username)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def delete_user(self, username: str) -> Any:
        """This can only be done by the logged in user.

        :param username: The name that needs to be deleted
        :type username: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(username)

        serialized_request = (
            Serializer(f"{self.base_url}/user/{{username}}", self.get_default_headers())
            .add_path("username", username)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)
        return response
