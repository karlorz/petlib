# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .category import Category
from .tag import Tag


class PetStatus(Enum):
    """An enumeration representing different categories.

    :cvar AVAILABLE: "available"
    :vartype AVAILABLE: str
    :cvar PENDING: "pending"
    :vartype PENDING: str
    :cvar SOLD: "sold"
    :vartype SOLD: str
    """

    AVAILABLE = "available"
    PENDING = "pending"
    SOLD = "sold"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, PetStatus._member_map_.values()))


@JsonMap({"id_": "id", "photo_urls": "photoUrls"})
class Pet(BaseModel):
    """Pet

    :param id_: id_, defaults to None
    :type id_: int, optional
    :param name: name
    :type name: str
    :param category: category, defaults to None
    :type category: Category, optional
    :param photo_urls: photo_urls
    :type photo_urls: List[str]
    :param tags: tags, defaults to None
    :type tags: List[Tag], optional
    :param status: pet status in the store, defaults to None
    :type status: PetStatus, optional
    """

    def __init__(
        self,
        name: str,
        photo_urls: List[str],
        id_: int = None,
        category: Category = None,
        tags: List[Tag] = None,
        status: PetStatus = None,
    ):
        """Pet

        :param id_: id_, defaults to None
        :type id_: int, optional
        :param name: name
        :type name: str
        :param category: category, defaults to None
        :type category: Category, optional
        :param photo_urls: photo_urls
        :type photo_urls: List[str]
        :param tags: tags, defaults to None
        :type tags: List[Tag], optional
        :param status: pet status in the store, defaults to None
        :type status: PetStatus, optional
        """
        if id_ is not None:
            self.id_ = id_
        self.name = name
        if category is not None:
            self.category = self._define_object(category, Category)
        self.photo_urls = photo_urls
        if tags is not None:
            self.tags = self._define_list(tags, Tag)
        if status is not None:
            self.status = self._enum_matching(status, PetStatus.list(), "status")
