// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { category, categoryRequest, categoryResponse } from './category';
import { tag, tagRequest, tagResponse } from './tag';
import { petStatus } from './pet-status';

/**
 * The shape of the model inside the application code - what the users use
 */
export const pet = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    name: z.string(),
    category: category.optional(),
    photoUrls: z.array(z.string()),
    tags: z.array(tag).optional(),
    status: petStatus.optional(),
  });
});

/**
 *
 * @typedef  {Pet} pet
 * @property {number}
 * @property {string}
 * @property {Category}
 * @property {string[]}
 * @property {Tag[]}
 * @property {PetStatus} - pet status in the store
 */
export type Pet = z.infer<typeof pet>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const petResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string(),
      category: categoryResponse.optional(),
      photoUrls: z.array(z.string()),
      tags: z.array(tagResponse).optional(),
      status: petStatus.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      category: data['category'],
      photoUrls: data['photoUrls'],
      tags: data['tags'],
      status: data['status'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const petRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().nullish(),
      name: z.string().nullish(),
      category: categoryRequest.nullish(),
      photoUrls: z.array(z.string()).nullish(),
      tags: z.array(tagRequest).nullish(),
      status: petStatus.nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      category: data['category'],
      photoUrls: data['photoUrls'],
      tags: data['tags'],
      status: data['status'],
    }));
});
