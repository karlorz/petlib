// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const user = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    username: z.string().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    email: z.string().optional(),
    password: z.string().optional(),
    phone: z.string().optional(),
    userStatus: z.number().optional(),
  });
});

/**
 *
 * @typedef  {User} user
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number} - User Status
 */
export type User = z.infer<typeof user>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const userResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      username: data['username'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      email: data['email'],
      password: data['password'],
      phone: data['phone'],
      userStatus: data['userStatus'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const userRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().nullish(),
      username: z.string().nullish(),
      firstName: z.string().nullish(),
      lastName: z.string().nullish(),
      email: z.string().nullish(),
      password: z.string().nullish(),
      phone: z.string().nullish(),
      userStatus: z.number().nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      username: data['username'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      email: data['email'],
      password: data['password'],
      phone: data['phone'],
      userStatus: data['userStatus'],
    }));
});
