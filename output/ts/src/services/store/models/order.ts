// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { orderStatus } from './order-status';

/**
 * The shape of the model inside the application code - what the users use
 */
export const order = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    petId: z.number().optional(),
    quantity: z.number().optional(),
    shipDate: z.string().optional(),
    status: orderStatus.optional(),
    complete: z.boolean().optional(),
  });
});

/**
 *
 * @typedef  {Order} order
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {OrderStatus} - Order Status
 * @property {boolean}
 */
export type Order = z.infer<typeof order>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const orderResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      petId: z.number().optional(),
      quantity: z.number().optional(),
      shipDate: z.string().optional(),
      status: orderStatus.optional(),
      complete: z.boolean().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      petId: data['petId'],
      quantity: data['quantity'],
      shipDate: data['shipDate'],
      status: data['status'],
      complete: data['complete'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const orderRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().nullish(),
      petId: z.number().nullish(),
      quantity: z.number().nullish(),
      shipDate: z.string().nullish(),
      status: orderStatus.nullish(),
      complete: z.boolean().nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      petId: data['petId'],
      quantity: data['quantity'],
      shipDate: data['shipDate'],
      status: data['status'],
      complete: data['complete'],
    }));
});
